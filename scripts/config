#!/bin/bash
# In simple cases, you don't need a config script. 

# With a simple config_panel.toml, you can write in the app settings, in the 
# upstream config file or replace complete files (logo ...) and restart services.

# The config scripts allows you to go further, to handle specific cases 
# (validation of several interdependent fields, specific getter/setter for a value,
# display dynamic informations or choices, pre-loading of config type .cube... ).

#=================================================
# GENERIC STARTING
#=================================================
# IMPORT GENERIC HELPERS
#=================================================

source /usr/share/yunohost/helpers

ynh_abort_if_errors

#=================================================
# RETRIEVE ARGUMENTS
#=================================================

final_path=$(ynh_app_setting_get $app final_path)

#=================================================
# SPECIFIC GETTERS FOR TOML SHORT KEY
#=================================================

get__amount() {
    # Here we can imagine to have an API call to stripe to know the amount of donation during a month
    local amount = 200

    # It's possible to change some properties of the question by overriding it:
    if [ $amount -gt 100 ]
    then
    cat << EOF
style: success
value: $amount
ask:
  en: A lot of donation this month: **$amount €**
EOF
    else
    cat << EOF
style: danger
value: $amount
ask:
  en: Not so much donation this month: $amount €
EOF
    fi
}

get__prices() {
    local prices = "$(grep "DONATION\['" "$final_path/settings.py" | sed -r "s@^DONATION\['([^']*)'\]\['([^']*)'\] = '([^']*)'@\1/\2/\3@g" | sed -z 's/\n/,/g;s/,$/\n/')"
    if [ "$prices" == "," ];
    then
        # Return YNH_NULL if you prefer to not return a value at all.
        echo YNH_NULL
    else
        echo $prices
    fi
}


#=================================================
# SPECIFIC VALIDATORS FOR TOML SHORT KEYS
#=================================================
validate__publishable_key() {

    # We can imagine here we test if the key is really a publisheable key
    (is_secret_key $publishable_key) &&
        echo 'This key seems to be a secret key'
}

#=================================================
# SPECIFIC SETTERS FOR TOML SHORT KEYS
#=================================================
set__prices() {

    #---------------------------------------------
    # IMPORTANT: setter are trigger only if a change is detected
    #---------------------------------------------
    for price in $(echo $prices | sed "s/,/ /"); do
        frequency=$(echo $price | cut -d/ -f1)
        currency=$(echo $price | cut -d/ -f2)
        price_id=$(echo $price | cut -d/ -f3)
        sed "d/DONATION\['$frequency'\]\['$currency'\]" "$final_path/settings.py"

        echo "DONATION['$frequency']['$currency'] = '$price_id'" >> "$final_path/settings.py"
    done
    
    #---------------------------------------------
    # IMPORTANT: to be able to upgrade properly, you have to saved the value in settings too
    #---------------------------------------------
    ynh_app_setting_set $app prices $prices
}

ynh_app_config_apply() {
    _ynh_app_config_apply

    if [ "${changed[phpversion]}" == "true" ]
    then
        ynh_app_setting_set --app=$app --key=phpversion --value="${old[phpversion]}"
        ynh_remove_fpm_config
        # ^ the helper includes ynh_remove_app_dependencies
        YNH_PHP_VERSION=$phpversion
        # ^ ynh_add_config replaces __PHPVERSION__ by __PHP_YNH_VERSION__...
        ynh_app_setting_set --app=$app --key=phpversion --value="$phpversion"

        nginx_extra_conf_dir="/etc/nginx/conf.d/$domain.d/$app.d"
        mkdir -p "$nginx_extra_conf_dir"
        if [ "$phpversion" == "none" ]
        then
            ynh_delete_file_checksum --file="$nginx_extra_conf_dir/php.conf"
            ynh_secure_remove --file="$nginx_extra_conf_dir/php.conf"
        else
            ynh_add_config --template="nginx-php.conf" --destination="$nginx_extra_conf_dir/php.conf"
            ynh_install_app_dependencies "php${phpversion}-fpm"
            ynh_add_fpm_config --usage=$fpm_usage --footprint=$fpm_footprint --phpversion=$phpversion
            # ^ the helper takes care of ynh_app_setting_set the phpversion
        fi

        ynh_add_nginx_config
    fi

    if [ "${changed[with_sftp]}" == "true" ] && [ $with_sftp -eq 1 ]
    then
        ynh_system_user_add_group --username=$app --groups="sftp.app"

        if [ ! "$password" == "" ]
        then
            chpasswd <<< "${app}:${password}"
        fi
    elif [ "${changed[with_sftp]}" == "true" ] && [ $with_sftp -eq 0 ]
    then
        ynh_system_user_del_group --username=$app --groups="sftp.app"
    fi

    if [ "$phpversion" != "none" ]
    then
        ynh_add_fpm_config --phpversion=$phpversion --usage=$fpm_usage --footprint=$fpm_footprint
    fi
}

#=================================================
# GENERIC FINALIZATION
#=================================================
ynh_app_config_run $1
